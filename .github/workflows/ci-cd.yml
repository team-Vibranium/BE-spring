name: CI/CD Pipeline

on:
  push:
    branches: [ develop, main ]   # develop, main에 머지(push)되면 배포 트리거
  pull_request:
    branches: [ develop, main ]   # feature → develop, develop → main PR일 때 CI 실행


env:
  IMAGE_NAME: aningcall-backend

jobs:
  # 테스트 및 빌드 검증
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: aningcall_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping -h localhost -P 3306 -u root -ptestpassword --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
        echo 'MySQL is ready!'

    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/aningcall_test
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: testpassword
        SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
        SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect
        SPRING_REDIS_HOST: localhost
        SPRING_REDIS_PORT: 6379

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: build/reports/tests/test/

  # 보안 스캔
  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker 이미지 빌드 및 푸시
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 개발 환경 배포
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Development via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          set -e
          cd ${{ secrets.REMOTE_PATH }}
          docker network inspect aningcall-network >/dev/null 2>&1 || docker network create aningcall-network
          git fetch --all
          git checkout develop || git checkout -b develop
          git pull -r || true
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          # .env.dev 생성 (Secrets 기반) → .env로 적용
          cat > .env.dev << 'EOF'
          DOCKER_REGISTRY=${{ secrets.DOCKERHUB_USERNAME }}/
          VERSION=${{ github.ref_name }}-${{ github.sha }}
          DB_URL=${{ secrets.DB_URL_DEV }}
          DB_USERNAME=${{ secrets.DB_USERNAME_DEV }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_DEV }}
          JWT_SECRET=${{ secrets.JWT_SECRET_DEV }}
          EOF
          if [ -n "${{ secrets.REDIS_PASSWORD_DEV }}" ]; then echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_DEV }}" >> .env.dev; fi
          cp .env.dev .env
          docker compose -f docker/compose/dev.yml pull
          docker compose -f docker/compose/dev.yml up -d

  # 프로덕션 환경 배포
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          set -e
          cd ${{ secrets.REMOTE_PATH }}
          docker network inspect aningcall-network >/dev/null 2>&1 || docker network create aningcall-network
          git fetch --all
          git checkout main || git checkout -b main
          git pull -r || true
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          # .env.prod 생성 (Secrets 기반) → .env로 적용
          cat > .env.prod << 'EOF'
          DOCKER_REGISTRY=${{ secrets.DOCKERHUB_USERNAME }}/
          VERSION=${{ github.ref_name }}-${{ github.sha }}
          DB_URL=${{ secrets.DB_URL_PROD }}
          DB_USERNAME=${{ secrets.DB_USERNAME_PROD }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_PROD }}
          JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}
          EOF
          if [ -n "${{ secrets.REDIS_PASSWORD_PROD }}" ]; then echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_PROD }}" >> .env.prod; fi
          cp .env.prod .env
          docker compose -f docker/compose/prod.yml pull
          docker compose -f docker/compose/prod.yml up -d
          # Issue or renew certificates with certbot (check inside the certbot volume)
          if docker compose -f docker/compose/prod.yml run --rm certbot sh -lc 'test -d /etc/letsencrypt/live/prod.proproject.my'; then
            docker compose -f docker/compose/prod.yml run --rm certbot renew --webroot -w /var/www/certbot || true
          else
            docker compose -f docker/compose/prod.yml run --rm certbot certonly --non-interactive --webroot -w /var/www/certbot -d prod.proproject.my -d dev.proproject.my --email ${{ secrets.CERTBOT_EMAIL }} --agree-tos --no-eff-email || true
          fi
          docker compose -f docker/compose/prod.yml exec nginx nginx -s reload || true
          docker image prune -f

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 Production deployment completed

          **Changes in this Release**
          ${{ github.event.head_commit.message }}

          **Docker Image**
          `${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}`
        draft: false
        prerelease: false
