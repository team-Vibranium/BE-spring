name: Deploy (Dev)

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  IMAGE_NAME: aningcall-backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute VERSION
        id: ver
        run: echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Prepare remote directories
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p "${{ secrets.REMOTE_PATH }}/docker/compose" \
                     "${{ secrets.REMOTE_PATH }}/docker/nginx/conf.d" \
                     "${{ secrets.REMOTE_PATH }}/logs"

      - name: Create .env for docker/compose (dev)
        run: |
          mkdir -p docker/compose
          cat <<'EOF' > docker/compose/.env
          DOCKER_REGISTRY=${{ secrets.DOCKERHUB_USERNAME }}/
          VERSION=${{ steps.ver.outputs.VERSION }}
          DB_URL=${{ secrets.DB_URL_DEV }}
          DB_USERNAME=${{ secrets.DB_USERNAME_DEV }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_DEV }}
          JWT_SECRET=${{ secrets.JWT_SECRET_DEV }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION_DEV || '86400000' }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD_DEV || secrets.REDIS_PASSWORD || 'devredis' }}
          EOF

      - name: Verify .env exists (dev)
        run: |
          ls -la docker/compose || true
          if [ ! -s docker/compose/.env ]; then
            echo "::error::.env not created. Check secrets (DB_URL_DEV, DB_USERNAME_DEV, DB_PASSWORD_DEV, JWT_SECRET_DEV)."; exit 1;
          fi
          sed -E 's/(=).*/=REDACTED/' docker/compose/.env
          if ! grep -q '^REDIS_PASSWORD=' docker/compose/.env || [ -z "$(grep '^REDIS_PASSWORD=' docker/compose/.env | cut -d'=' -f2-)" ]; then
            echo "::warning::REDIS_PASSWORD is empty. Using default devredis at runtime.";
          fi

      - name: Upload .env to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker/compose/.env"
          target: "${{ secrets.REMOTE_PATH }}/"

      - name: Verify .env on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            ls -la "${{ secrets.REMOTE_PATH }}/docker/compose" || true
            if [ ! -s "${{ secrets.REMOTE_PATH }}/docker/compose/.env" ]; then
              echo "Missing .env on server at ${{ secrets.REMOTE_PATH }}/docker/compose/.env" >&2; exit 1;
            fi

      - name: Upload nginx.conf (dev)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker/nginx/nginx.conf"
          target: "${{ secrets.REMOTE_PATH }}/"

      - name: Upload dev.conf (dev)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker/nginx/conf.d/dev.conf"
          target: "${{ secrets.REMOTE_PATH }}/"

      - name: Upload api.conf (shared nginx)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker/nginx/conf.d/api.conf"
          target: "${{ secrets.REMOTE_PATH }}/"

      - name: Deploy on server (compose up)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker network create aningcall-network || true
            cd "${{ secrets.REMOTE_PATH }}"
            # Ensure logs directory is writable by app user (uid 1001)
            mkdir -p logs && chown -R 1001:1001 logs || true
            docker compose --env-file docker/compose/.env -f docker/compose/dev.yml pull
            docker compose --env-file docker/compose/.env -f docker/compose/dev.yml up -d
            if docker compose --env-file docker/compose/.env -f docker/compose/dev.yml ps nginx >/dev/null 2>&1; then
              docker compose --env-file docker/compose/.env -f docker/compose/dev.yml up -d nginx || true
              docker compose --env-file docker/compose/.env -f docker/compose/dev.yml exec -T nginx nginx -t && docker compose --env-file docker/compose/.env -f docker/compose/dev.yml exec -T nginx nginx -s reload || true
            else
              # Try reloading the prod nginx (shared nginx container serves dev + prod)
              if docker compose -f docker/compose/prod.yml ps nginx >/dev/null 2>&1; then
                docker compose -f docker/compose/prod.yml exec -T nginx nginx -t && docker compose -f docker/compose/prod.yml exec -T nginx nginx -s reload || true
              elif docker ps --format '{{.Names}}' | grep -q '^aningcall-nginx-prod$'; then
                docker exec -t aningcall-nginx-prod nginx -t && docker exec -t aningcall-nginx-prod nginx -s reload || true
              fi
            fi
