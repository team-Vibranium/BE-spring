spring:
  profiles:
    active: local
  application:
    name: bespring-backend

---
# Local Development Profile
spring:
  config:
    activate:
      on-profile: local

  datasource:
    url: ${DB_URL:jdbc:h2:mem:testdb}
    driver-class-name: ${DB_DRIVER:org.h2.Driver}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_TIMEOUT:2000ms}
      database: ${REDIS_DATABASE:0}

  jackson:
    property-naming-strategy: SNAKE_CASE
    default-property-inclusion: NON_NULL

server:
  port: ${SERVER_PORT:8080}

logging:
  level:
    com.bespring: DEBUG
    org.springframework.security: DEBUG
  pattern:
    console: "%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when_authorized

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    # Place OpenAPI under /api so Nginx proxies it
    path: /api/v3/api-docs
  swagger-ui:
    # Serve Swagger UI under /api as well
    path: /api/swagger-ui.html
    tags-sorter: alpha
    operations-sorter: method
  packages-to-scan: com.bespring
  show-actuator: false

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:myVerySecretKeyForDevelopmentOnlyMustBe256BitsOrLongerForHS256AlgorithmSoThisIsAVeryLongSecretKey}
  expiration: ${JWT_EXPIRATION:86400000}  # 24시간 (밀리초)

# Application Configuration
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: ${DB_URL:jdbc:h2:mem:testdb}
    driver-class-name: ${DB_DRIVER:org.h2.Driver}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_TIMEOUT:1000ms}
      database: ${REDIS_DATABASE:1}

logging:
  level:
    com.bespring: INFO
    root: WARN
  pattern:
    console: "%d{HH:mm:ss} %-5level %logger{36} - %msg%n"

jwt:
  secret: ${JWT_SECRET:testSecretKeyForTestingOnlyMustBe256BitsOrLongerForHS256AlgorithmSoThisIsAVeryLongTestSecretKey}
  expiration: ${JWT_EXPIRATION:3600000}  # 1시간 (밀리초)

app:
  cors:
    allowed-origins: "http://localhost:3000"
    allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
    allowed-headers: "*"
    allow-credentials: true

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/aningcall_dev}
    driver-class-name: ${DB_DRIVER:com.mysql.cj.jdbc.Driver}
    username: ${SPRING_DATASOURCE_USERNAME:admin}
    password: ${SPRING_DATASOURCE_PASSWORD:password}

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect

  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}
      timeout: ${REDIS_TIMEOUT:2000ms}
      database: ${REDIS_DATABASE:0}

jwt:
  secret: ${JWT_SECRET:myVerySecretKeyForDevelopmentOnlyMustBe256BitsOrLongerForHS256AlgorithmSoThisIsAVeryLongSecretKey}
  expiration: ${JWT_EXPIRATION:86400000}

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    hibernate:
      ddl-auto: validate
